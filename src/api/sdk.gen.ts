// This file is auto-generated by @hey-api/openapi-ts

import { type Options, createClient, createConfig } from '@hey-api/client-fetch'
import type {
  CreateNoteData,
  CreateNoteError,
  CreateNoteResponse,
  CreatePendingFileUploadData,
  CreatePendingFileUploadError,
  CreatePendingFileUploadResponse,
  CreatePersonData,
  CreatePersonError,
  CreatePersonResponse,
  CreateReferenceData,
  CreateReferenceError,
  CreateReferenceResponse,
  CreateUserData,
  CreateUserError,
  CreateUserResponse,
  DeleteNoteData,
  DeleteNoteError,
  DeleteNoteResponse,
  GetBlockListData,
  GetBlockListError,
  GetBlockListResponse,
  GetCommentListData,
  GetCommentListError,
  GetCommentListResponse,
  GetContentData,
  GetContentError,
  GetContentListData,
  GetContentListError,
  GetContentListResponse,
  GetContentResponse,
  GetDocumentData,
  GetDocumentError,
  GetDocumentListData,
  GetDocumentListError,
  GetDocumentListResponse,
  GetDocumentResponse,
  GetLabelListData,
  GetLabelListError,
  GetLabelListResponse,
  GetNoteData,
  GetNoteError,
  GetNoteLabelListData,
  GetNoteLabelListError,
  GetNoteLabelListResponse,
  GetNoteListData,
  GetNoteListError,
  GetNoteListResponse,
  GetNoteResponse,
  GetPersonByEmailData,
  GetPersonByEmailError,
  GetPersonByEmailResponse,
  GetPersonData,
  GetPersonError,
  GetPersonListData,
  GetPersonListError,
  GetPersonListResponse,
  GetPersonResponse,
  GetReferenceListData,
  GetReferenceListError,
  GetReferenceListResponse,
  GetSequenceDocumentListData,
  GetSequenceDocumentListError,
  GetSequenceDocumentListResponse,
  GetSequenceListData,
  GetSequenceListError,
  GetSequenceListResponse,
  GetUserData,
  GetUserError,
  GetUserListData,
  GetUserListError,
  GetUserListResponse,
  GetUserResponse,
  GetWorkspaceData,
  GetWorkspaceError,
  GetWorkspaceResponse,
  UpdatePersonData,
  UpdatePersonError,
  UpdatePersonResponse,
} from './types.gen'

export const client = createClient(createConfig())

/**
 * Get block list
 * Get a list of blocks
 */
export const getBlockList = <ThrowOnError extends boolean = false>(
  options?: Options<GetBlockListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBlockListResponse,
    GetBlockListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/block',
  })
}

/**
 * Get comment list
 * Get a list of comments
 */
export const getCommentList = <ThrowOnError extends boolean = false>(
  options?: Options<GetCommentListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetCommentListResponse,
    GetCommentListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/comment',
  })
}

/**
 * Get content list
 * Get a list of content
 */
export const getContentList = <ThrowOnError extends boolean = false>(
  options?: Options<GetContentListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetContentListResponse,
    GetContentListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/content',
  })
}

/**
 * Get content
 * Get content by its unique identifier
 */
export const getContent = <ThrowOnError extends boolean = false>(
  options: Options<GetContentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetContentResponse,
    GetContentError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/content/{contentId}',
  })
}

/**
 * List all documents
 * Retrieves a list of all documents accessible to the authenticated user. Optionally includes archived documents.
 */
export const getDocumentList = <ThrowOnError extends boolean = false>(
  options?: Options<GetDocumentListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDocumentListResponse,
    GetDocumentListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/document',
  })
}

/**
 * Get a document
 * Get a document by its unique identifier
 */
export const getDocument = <ThrowOnError extends boolean = false>(
  options: Options<GetDocumentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetDocumentResponse,
    GetDocumentError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/document/{documentId}',
  })
}

/**
 * Retrieve a token to upload a file
 * Retrieve a token to upload a file using the tus protocol.
 */
export const createPendingFileUpload = <ThrowOnError extends boolean = false>(
  options?: Options<CreatePendingFileUploadData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePendingFileUploadResponse,
    CreatePendingFileUploadError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/file-upload',
  })
}

/**
 * Get label list
 * Get a list of labels
 */
export const getLabelList = <ThrowOnError extends boolean = false>(
  options?: Options<GetLabelListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLabelListResponse,
    GetLabelListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/label',
  })
}

/**
 * Get note label list
 * Get a list of note labels
 */
export const getNoteLabelList = <ThrowOnError extends boolean = false>(
  options?: Options<GetNoteLabelListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetNoteLabelListResponse,
    GetNoteLabelListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/note-label',
  })
}

/**
 * Get note list
 * Get a list of notes
 */
export const getNoteList = <ThrowOnError extends boolean = false>(
  options?: Options<GetNoteListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetNoteListResponse,
    GetNoteListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/note',
  })
}

/**
 * Create a note
 * Create a note
 */
export const createNote = <ThrowOnError extends boolean = false>(
  options?: Options<CreateNoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateNoteResponse,
    CreateNoteError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/note',
  })
}

/**
 * Delete a note
 * Delete a note by its unique identifier
 */
export const deleteNote = <ThrowOnError extends boolean = false>(
  options: Options<DeleteNoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteNoteResponse,
    DeleteNoteError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/note/{noteId}',
  })
}

/**
 * Get a note
 * Get a note by its unique identifier
 */
export const getNote = <ThrowOnError extends boolean = false>(
  options: Options<GetNoteData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetNoteResponse,
    GetNoteError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/note/{noteId}',
  })
}

/**
 * Get person list
 * Get a list of people
 */
export const getPersonList = <ThrowOnError extends boolean = false>(
  options?: Options<GetPersonListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPersonListResponse,
    GetPersonListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/person',
  })
}

/**
 * Create person
 * Create a person in the workspace
 */
export const createPerson = <ThrowOnError extends boolean = false>(
  options?: Options<CreatePersonData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreatePersonResponse,
    CreatePersonError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/person',
  })
}

/**
 * Get person
 * Get a person by their ID
 */
export const getPerson = <ThrowOnError extends boolean = false>(
  options: Options<GetPersonData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPersonResponse,
    GetPersonError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/person/{personId}',
  })
}

/**
 * Update person
 * Update a person in the workspace. The person must already exist in the workspace.
 */
export const updatePerson = <ThrowOnError extends boolean = false>(
  options: Options<UpdatePersonData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdatePersonResponse,
    UpdatePersonError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/person/{personId}',
  })
}

/**
 * Get person by email
 * Get a person by their email address
 */
export const getPersonByEmail = <ThrowOnError extends boolean = false>(
  options: Options<GetPersonByEmailData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetPersonByEmailResponse,
    GetPersonByEmailError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/person/email/{email}',
  })
}

/**
 * Get reference list
 * Get a list of references
 */
export const getReferenceList = <ThrowOnError extends boolean = false>(
  options?: Options<GetReferenceListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetReferenceListResponse,
    GetReferenceListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/reference',
  })
}

/**
 * Create reference
 * Create a reference in the workspace
 */
export const createReference = <ThrowOnError extends boolean = false>(
  options?: Options<CreateReferenceData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateReferenceResponse,
    CreateReferenceError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/reference',
  })
}

/**
 * Get sequence document list
 * Get a list of sequence documents
 */
export const getSequenceDocumentList = <ThrowOnError extends boolean = false>(
  options?: Options<GetSequenceDocumentListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSequenceDocumentListResponse,
    GetSequenceDocumentListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/sequence-document',
  })
}

/**
 * Get sequence list
 * Get a list of sequences
 */
export const getSequenceList = <ThrowOnError extends boolean = false>(
  options?: Options<GetSequenceListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetSequenceListResponse,
    GetSequenceListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/sequence',
  })
}

/**
 * Get user list
 * Get a list of users
 */
export const getUserList = <ThrowOnError extends boolean = false>(
  options?: Options<GetUserListData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserListResponse,
    GetUserListError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user',
  })
}

/**
 * Create user
 * Create a user in the workspace
 */
export const createUser = <ThrowOnError extends boolean = false>(
  options?: Options<CreateUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateUserResponse,
    CreateUserError,
    ThrowOnError
  >({
    ...options,
    headers: {
      'Content-Type': 'application/json',
      ...options?.headers,
    },
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user',
  })
}

/**
 * Get user
 * Get a user
 */
export const getUser = <ThrowOnError extends boolean = false>(
  options: Options<GetUserData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetUserResponse,
    GetUserError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/user/{userId}',
  })
}

/**
 * Get workspace
 * Get the workspace
 */
export const getWorkspace = <ThrowOnError extends boolean = false>(
  options?: Options<GetWorkspaceData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetWorkspaceResponse,
    GetWorkspaceError,
    ThrowOnError
  >({
    ...options,
    security: [
      {
        scheme: 'bearer',
        type: 'http',
      },
    ],
    url: '/api/v1/workspace/current',
  })
}
